<classDecl*> -> epsilon
<funcDef*> -> epsilon
program
{
int
<type> -> int
a
<arraySize*> -> epsilon
;
<varDecl> -> <type>id<arraySize*>;
int
<type> -> int
b
<arraySize*> -> epsilon
;
<varDecl> -> <type>id<arraySize*>;
float
<type> -> float
c
<arraySize*> -> epsilon
;
<varDecl> -> <type>id<arraySize*>;
int
<type> -> int
d
[
15
]
<arraySize> -> [ num(int) ]
<arraySize*> -> epsilon
<arraySize*> -> <arraySize><arraySize*> 
;
<varDecl> -> <type>id<arraySize*>;
<varDecl*> -> epsilon
<varDecl*> -> <varDecl><varDecl*> 
<varDecl*> -> <varDecl><varDecl*> 
<varDecl*> -> <varDecl><varDecl*> 
<varDecl*> -> <varDecl><varDecl*> 
a
<indice*> -> epsilon
<idnest*> -> epsilon
<variable> -> id<indice*><idnest*>
=
<assignOp> -> =
a
<indice*> -> epsilon
<idnest*> -> epsilon
<varFuncCall> -> epsilon
<factor>	-> id<idnest*><varFuncCall>
<term'> -> epsilon
<term> -> <factor><term'>
+
<addOp> -> +
b
<indice*> -> epsilon
<idnest*> -> epsilon
<varFuncCall> -> epsilon
<factor>	-> id<idnest*><varFuncCall>
*
<multOp> -> *
c
<indice*> -> epsilon
<idnest*> -> epsilon
<varFuncCall> -> epsilon
<factor>	-> id<idnest*><varFuncCall>
<term'> -> epsilon
<term'> -> <multOp><factor><term'>
<term> -> <factor><term'>
<arithExpr'> -> epsilon
<arithExpr'> -> <addOp><term><arithExpr'>
<arithExpr> -> <term><arithExpr'>
<pRel> -> epsilon
<expr> -> <arithExpr><pRel>
<assignStat> -> <variable><assignOp><expr>
;
<statement> -> <assignStat>;
<statement*> -> epsilon
<statement*> -> <statement><statement*> 
}
<funcBody> -> {<varDecl*><statement*>}
;
<progBody> -> program<funcBody>;<funcDef*>
<prog> -> <classDecl*><progBody>

